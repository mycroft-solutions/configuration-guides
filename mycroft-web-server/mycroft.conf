# redirect all http calls to https
server {
  listen 80   default_server;
  return 301  https://$host$request_uri;
}

# redirect requests targeted at the ip address to the domain name
# server {
#   listen       443;
#   server_name  <ip_address>;
#   return       301            https://<domain_name>$request_uri;
# }

# close invalid connections without a response
server {
  listen               443;
  server_name          _;

  ssl_certificate      /etc/nginx/ssl/nginx.crt;
  ssl_certificate_key  /etc/nginx/ssl/nginx.key;

  return               444;
}

# host static files of Mycroft Website
server {
  listen               443 ssl http2;
  server_name          <server_name>;

  ssl_certificate      /etc/nginx/ssl/<cert_name>.crt;
  ssl_certificate_key  /etc/nginx/ssl/<cert_name>.key;
  ssl_session_cache    builtin:1000 shared:SSL:10m;

  access_log           /var/log/nginx/<log_file>.log;

  location / {
    root       <path_to_static_files>;
    try_files  $uri /index.html;
  }
}

# Mycroft API proxy pass
server {
  listen               <port_number> ssl http2;
  server_name          <server_name>;

  ssl_certificate      /etc/nginx/ssl/<cert_name>.crt;
  ssl_certificate_key  /etc/nginx/ssl/<cert_name>.key;
  ssl_session_cache    builtin:1000 shared:SSL:10m;

  access_log           /var/log/nginx/<log_file>.log;

  location /<public_path> {
    proxy_set_header  Host $host;
    proxy_set_header  X-Real-IP $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto $scheme;

    proxy_pass        <service_url>;
  }
}

# Mycroft Auth proxy pass
server {
  listen               <port_number> ssl http2;
  server_name          <server_name>;

  ssl_certificate      /etc/nginx/ssl/<cert_name>.crt;
  ssl_certificate_key  /etc/nginx/ssl/<cert_name>.key;
  ssl_session_cache    builtin:1000 shared:SSL:10m;

  access_log           /var/log/nginx/<log_file>.log;

  location /<public_path> {
    proxy_set_header  Host $host;
    proxy_set_header  X-Real-IP $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto $scheme;

    proxy_pass        http://<service_url>;
  }
}